#!/usr/bin/env coffee

# Orona, © 2010 Stéphan Kochen

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

{floor} = Math
{puts}  = require 'sys'
fs      = require 'fs'
{load}  = require 'bolo/map'


# Exit helper.
bail = (msg) ->
  puts msg
  process.exit 1


# Check arguments.
unless process.argv.length == 2
  puts "Usage: bmap2ascii <input> <output>"
  puts "Converts a Bolo map in traditional format to ASCII format."
  process.exit 1

# Open input.
buffer = try
  fs.readFileSync process.argv[0]
catch e
  bail "Could not read '#{process.argv[0]}': #{e.message}"

map = try
  load buffer
catch e
  bail "Could not load map file: #{e}"


# Output.
sections = ["Bolo map, version 0"]

attrLines = (item, names...) ->
  str = "  @#{item.x},#{item.y}"
  for name in names
    str += " #{name}:#{item[name]}"
  str

lines = attrLines(pill, 'owner', 'armour', 'speed') for pill in map.pills
lines.unshift "Pillboxes:"
sections.push lines.join('\n')

lines = attrLines(base, 'owner', 'armour', 'shells', 'mines') for base in map.bases
lines.unshift "Bases:"
sections.push lines.join('\n')

lines = attrLines(start, 'direction') for start in map.starts
lines.unshift "Starting positions:"
sections.push lines.join('\n')

lines = for row in map.cells
  cells = "#{cell.type.ascii}#{if cell.mine then '*' else ' '}" for cell in row
  cells.join('')
lines.push('')  # Make sure the file ends with a newline.
sections.push lines.join('\n')

data = sections.join('\n\n') 

fs.writeFileSync process.argv[1], data, 'ascii'
